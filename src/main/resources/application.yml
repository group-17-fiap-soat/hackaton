spring:
  devtools:
    restart:
      enabled: true
  datasource:
    url: jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE}
    username: ${DATABASE_USER}
    password: ${DATABASE_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  application:
    name: hackaton
  threads:
    virtual:
      enabled: true
  flyway:
    enabled: false
  security:
    user:
      name: admin
      password: admin
  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 50MB
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${EMAIL_USERNAME:fiapxgrupo17hackaton@gmail.com}
    password: ${EMAIL_PASSWORD:fuzv lolj ymlt xtjb}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 10
          max-idle: 10
          min-idle: 1
          time-between-eviction-runs: 10s
  cache:
    type: redis
    redis:
      time-to-live: 600000
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      retries: ${KAFKA_RETRIES:3}
      batch-size: ${KAFKA_BATCH_SIZE:16384}
      linger-ms: ${KAFKA_LINGER_MS:5}
      acks: all
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP_ID:hackaton-video-processing}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: ${KAFKA_AUTO_OFFSET_RESET:earliest}
      enable-auto-commit: ${KAFKA_ENABLE_AUTO_COMMIT:true}
      properties:
        spring.json.trusted.packages: "tech.challenge.hackaton"


logging:
  level:
    tech.challenge: debug
    org.apache.kafka: info
    org.springframework.kafka: debug

server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /
  error:
    include-stacktrace: on_param
  tomcat:
    threads:
      max: 20
  forward-headers-strategy: native
  address: 0.0.0.0

jwt:
  secret: bXktc3VwZXItc2VjdXJlLWp3dC1rZXktdGhhdC1pcy12ZXJ5LWxvbmctYW5kLXNlY3VyZS1mb3ItcHJvZHVjdGlvbi1hbmQtbXVzdC1iZS1hdC1sZWFzdC0yNTYtYml0cy1mb3ItaG1hYy1zaGEtYWxnb3JpdGhtcw==
  expiration:
    ms: 86400000

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
  show-actuator: false
  default-consumes-media-type: application/json
  default-produces-media-type: application/json
  packages-to-scan: hackaton.fiapx.adapters.controllers
  paths-to-match: /api/**

# Actuator configuration for Prometheus metrics
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
    tags:
      application: hackaton-keyframe-app

